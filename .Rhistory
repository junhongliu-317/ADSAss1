for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr [, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix (0, nsrcs, 1)
A <- matrix (0, nsrcs, 1)
Alr <- matrix (0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr [, k]<-A
}
Dlr <- X%*%t(Alr)
print(sum((X - Dlr%*%Alr)^2))
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix (0, nsrcs, 1)
A <- matrix (0, nsrcs, 1)
Alr <- matrix (0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr [, k]<-A
}
Dlr <- X%*%t(Alr)
print(sum((X - Dlr%*%Alr)))
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
print((X - Dlr%*%Alr))
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
print(sum(X - Dlr%*%Alr))
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
View(Alr)
View(X)
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
print(sum(X^2))
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
print(sum(X^2))
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for( k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] =(TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
x1 = 21
x2 = 21
nsrcs <- 6
plot(0:1, 0:1, type = "n")
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
sum((X - Dlr%*%Alr)^2)/(N * V)
View(Dlr)
sum((X - Dlr%*%Alr)^2)/(N * V)
x1 = 21
x2 = 21
nsrcs <- 6
plot(type = "n")
x1 = 21
x2 = 21
nsrcs <- 6
plot(x = 1)
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
points(rho,MSE)
}
x1 = 21
x2 = 21
nsrcs <- 6
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
print(MSE)
points(rho,MSE)
}
x1 = 21
x2 = 21
nsrcs <- 6
N <- 240
V <- 441
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
print(MSE)
#points(rho,MSE)
}
x1 = 21
x2 = 21
nsrcs <- 6
N <- 240
V <- 441
MSEs <- vector(mode = "list", length = 0)
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
MSEs <- append(MSEs, MSE)
#points(rho,MSE)
}
MSEs
x1 = 21
x2 = 21
nsrcs <- 6
N <- 240
V <- 441
MSEs <- vector(length = 0)
for (rho in seq(from = 0, to = 1, by = 0.05)){
MSE = 0
for (i in 1:10){
tmpTCnoise <- rnorm(N * 6, mean = 0, sd = sqrt(0.25))
tmpSMnoise <- rnorm(6 * smDim^2, mean = 0, sd = sqrt(0.015))
TCnoise <- matrix(tmpTCnoise, nrow = N, ncol = 6)
SMnoise <- matrix(tmpSMnoise, nrow = 6, ncol = smDim^2)
X = (TC + TCnoise) %*% (SM +SMnoise)
for (j in 1:441){
X[,j] <- standardiseVector(X[,j])
}
step <- 1 / (norm(TC%*%t(TC)) * 1.1)
thr <- rho*N*step
Ao <- matrix(0, nsrcs, 1)
A <- matrix(0, nsrcs, 1)
Alr <- matrix(0, nsrcs, x1*x2)
for(k in 1:( x1*x2 ) ){
A <- Ao+step *( t(TC)%*%(X[,k] - (TC%*%Ao)))
A <- (1/(1+ thr)) * (sign(A)*pmax (replicate(nsrcs, 0) , abs(A) - thr))
for (m in 1:10 ){
Ao <- A
A <- Ao+step*(t(TC)%*%(X[,k]-(TC%*%Ao)))
A <- (1/(1+thr)) * (sign(A)*pmax (replicate(nsrcs, 0 ), abs(A)-thr))
}
Alr[, k]<-A
}
Dlr <- X%*%t(Alr)
LRParam <- sum((X - Dlr%*%Alr)^2)/(N * V)
MSE = MSE + LRParam
}
MSE = MSE/10
MSEs <- append(MSEs, MSE)
#points(rho,MSE)
}
MSEs
plot(MSes, y = seq(from = 0, to = 1, by = 0.05))
plot(MSEs, y = seq(from = 0, to = 1, by = 0.05))
plot(x = seq(from = 0, to = 1, by = 0.05), y = MSEs)
